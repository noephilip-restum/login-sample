{"ast":null,"code":"import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport Validate from '../../tools/Validate';\nconst initialState = {\n  email: '',\n  password: ''\n};\nconst initialValidateState = {\n  errors: {},\n  isLoading: false\n};\nexport default function SignInForm() {\n  const {\n    state\n  } = useContext(UserContext);\n  const [user, setUser] = useState(initialState);\n  const [validate, setValidate] = useState(initialValidateState);\n  const error = Validate(state, user, 'sign-in');\n\n  const handleChange = e => {\n    const {\n      name,\n      type,\n      checked,\n      value\n    } = e.target;\n    setUser({ ...user,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let res = state.find(account => account.email === user.email && account.password === user.password);\n    setValidate({ ...validate,\n      errors: error,\n      isLoading: true\n    });\n\n    if (Object.keys(error).length === 0) {\n      setTimeout(() => {\n        if (Object.keys(res).length !== 0) {\n          NotificationManager.success(`Hello ${res.name}`);\n          setUser(initialState);\n          setValidate(initialValidateState);\n        } else {\n          NotificationManager.error(`Invalid email and password`);\n        }\n      }, 1000);\n    } else {\n      setValidate({ ...validate,\n        errors: error,\n        isLoading: false\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/home/bs94/Desktop/login-sample/src/components/Login/SignInForm.js"],"names":["React","useState","useContext","Link","UserContext","NotificationContainer","NotificationManager","Validate","initialState","email","password","initialValidateState","errors","isLoading","SignInForm","state","user","setUser","validate","setValidate","error","handleChange","e","name","type","checked","value","target","handleSubmit","preventDefault","res","find","account","Object","keys","length","setTimeout","success"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SACCC,qBADD,EAECC,mBAFD,QAGO,qBAHP;AAIA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,QAAQ,EAAE;AAFU,CAArB;AAKA,MAAMC,oBAAoB,GAAG;AAC5BC,EAAAA,MAAM,EAAE,EADoB;AAE5BC,EAAAA,SAAS,EAAE;AAFiB,CAA7B;AAIA,eAAe,SAASC,UAAT,GAAsB;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAYb,UAAU,CAACE,WAAD,CAA5B;AAEA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAACO,YAAD,CAAhC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAACU,oBAAD,CAAxC;AACA,QAAMS,KAAK,GAAGb,QAAQ,CAACQ,KAAD,EAAQC,IAAR,EAAc,SAAd,CAAtB;;AAEA,QAAMK,YAAY,GAAGC,CAAC,IAAI;AACzB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,OAAd;AAAuBC,MAAAA;AAAvB,QAAiCJ,CAAC,CAACK,MAAzC;AACAV,IAAAA,OAAO,CAAC,EACP,GAAGD,IADI;AAEP,OAACO,IAAD,GAAQC,IAAI,KAAK,UAAT,GAAsBC,OAAtB,GAAgCC;AAFjC,KAAD,CAAP;AAIA,GAND;;AAQA,QAAME,YAAY,GAAGN,CAAC,IAAI;AACzBA,IAAAA,CAAC,CAACO,cAAF;AAEA,QAAIC,GAAG,GAAGf,KAAK,CAACgB,IAAN,CACTC,OAAO,IACNA,OAAO,CAACvB,KAAR,KAAkBO,IAAI,CAACP,KAAvB,IAAgCuB,OAAO,CAACtB,QAAR,KAAqBM,IAAI,CAACN,QAFlD,CAAV;AAIAS,IAAAA,WAAW,CAAC,EACX,GAAGD,QADQ;AAEXN,MAAAA,MAAM,EAAEQ,KAFG;AAGXP,MAAAA,SAAS,EAAE;AAHA,KAAD,CAAX;;AAMA,QAAIoB,MAAM,CAACC,IAAP,CAAYd,KAAZ,EAAmBe,MAAnB,KAA8B,CAAlC,EAAqC;AACpCC,MAAAA,UAAU,CAAC,MAAM;AAChB,YAAIH,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,MAAjB,KAA4B,CAAhC,EAAmC;AAClC7B,UAAAA,mBAAmB,CAAC+B,OAApB,CAA6B,SAAQP,GAAG,CAACP,IAAK,EAA9C;AACAN,UAAAA,OAAO,CAACT,YAAD,CAAP;AACAW,UAAAA,WAAW,CAACR,oBAAD,CAAX;AACA,SAJD,MAIO;AACNL,UAAAA,mBAAmB,CAACc,KAApB,CAA2B,4BAA3B;AACA;AACD,OARS,EAQP,IARO,CAAV;AASA,KAVD,MAUO;AACND,MAAAA,WAAW,CAAC,EACX,GAAGD,QADQ;AAEXN,QAAAA,MAAM,EAAEQ,KAFG;AAGXP,QAAAA,SAAS,EAAE;AAHA,OAAD,CAAX;AAKA;AACD,GA9BD;;AAgCA,SAAO,yCAAP;AACA","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport {\n\tNotificationContainer,\n\tNotificationManager\n} from 'react-notifications';\nimport Validate from '../../tools/Validate';\n\nconst initialState = {\n\temail: '',\n\tpassword: ''\n};\n\nconst initialValidateState = {\n\terrors: {},\n\tisLoading: false\n};\nexport default function SignInForm() {\n\tconst { state } = useContext(UserContext);\n\n\tconst [user, setUser] = useState(initialState);\n\tconst [validate, setValidate] = useState(initialValidateState);\n\tconst error = Validate(state, user, 'sign-in');\n\n\tconst handleChange = e => {\n\t\tconst { name, type, checked, value } = e.target;\n\t\tsetUser({\n\t\t\t...user,\n\t\t\t[name]: type === 'checkbox' ? checked : value\n\t\t});\n\t};\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\n\t\tlet res = state.find(\n\t\t\taccount =>\n\t\t\t\taccount.email === user.email && account.password === user.password\n\t\t);\n\t\tsetValidate({\n\t\t\t...validate,\n\t\t\terrors: error,\n\t\t\tisLoading: true\n\t\t});\n\n\t\tif (Object.keys(error).length === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (Object.keys(res).length !== 0) {\n\t\t\t\t\tNotificationManager.success(`Hello ${res.name}`);\n\t\t\t\t\tsetUser(initialState);\n\t\t\t\t\tsetValidate(initialValidateState);\n\t\t\t\t} else {\n\t\t\t\t\tNotificationManager.error(`Invalid email and password`);\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tsetValidate({\n\t\t\t\t...validate,\n\t\t\t\terrors: error,\n\t\t\t\tisLoading: false\n\t\t\t});\n\t\t}\n\t};\n\n\treturn <></>;\n}\n"]},"metadata":{},"sourceType":"module"}